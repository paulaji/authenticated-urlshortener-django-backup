/////
/////
/////
/////
/////

django project name: backend
django app name: application
api: application > api

/////
/////
/////
/////
/////

superuser credentials: username: user | password: resu321321 | email: user@user.com

/////
/////
/////
/////
/////

notable urls: http://127.0.0.1:8000/api/ | http://127.0.0.1:8000/api/token/ | http://127.0.0.1:8000/api/token/refresh/ | http://127.0.0.1:8000/register/registeruser/ | http://127.0.0.1:8000/register/shorten/

/////
/////
/////
/////
/////

virtualenv venv // created virtual environment
venv\scripts\activate // activate venv

pip install django // install django
django-admin startproject backend // backend side using django

python manage.py startapp application // created django app inside the project named application

inside the app application, created api folder for the api and included files __init__, urls, views and serializers

python manage.py runserver // starting the app

python -m pip install djangorestframework // install drf (this includes inbuilt password hashing when we update password), using python -m prefix is gonna install the djangorestframework globally outside the venv

python manage.py migrate // migrate since we installed drf

when we start the server, drf interface comes up and when we navigate to the DRF page, we can find authentications and documents on how to setup drf authentication
in the github link of JWT authentication, we can navigate to simplejwt page and read the setup

python -m pip install djangorestframework-simplejwt // for simplejwt

after the installation, settings.py configuration is needed for simplejwt to tell django to use simplejwt authentication method
we can also use the built-in views of simplejwt for access token and refresh token
inorder to do that, we have to alter the urls.py inside our api folder

inorder to check for the working of tokens, we need a user, therefore creating a superuser
python manage.py createsuperuser // to create superuser
username: user
password: resu321321
email: user@user.com

we can actually set how jwt authentication should work in our specific way
for eg: the lifespan of access token, refresh token etc
for that: https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html
add the code to settings.py

going into the refreshtoken url (token/refresh/), if we paste in the refresh token, we can obtain a new access token
refreshtoken rotation is set to True for extra safety so that each time an access token is generated, a new refresh token is also generated
also for extra safety, we are going to blacklist a refresh token once it is used so that a potential hacker doesnt use a refresh token to generate new access/refresh tokens
for blacklist feature to work, we have to do some additional settings changes, under installed apps, we have to add:
'rest_framework_simplejwt.token_blacklist'
python manage.py migrate // afterwards to put this in effect

to encrypt/encode the username along with the token or to customize our token
https://django-rest-framework-simplejwt.readthedocs.io/en/latest/customizing_token_claims.html

/////
/////
/////
/////
/////

CORS (Cross-Origin Resource Sharing)

we are using django on port8000 and react on port3000
therefore, to enable the communication between the two, we configure CORS

python -m pip install django-cors-headers // to setup cors configurations and afterwards, do configurations in settings.py

we are going to accept communication from all different sources in this case (usually, we can configure this specifically such that we only accept communication from the places we specify)
CORS_ALLOW_ALL_ORIGINS = True

/////
/////
/////
/////
/////

next, we are creating a note model
maybe 1 or 2 user from the django admin panel such that when we login, we get notes corresponding to the specific user

add the note model we created to the admin.py

access the admin panel to create new user

/////
/////
/////
/////
/////

now that we have created a couple more users and populated them with notes, we need to pass this into the frontend
we can serialize the python code into json and serve it into the frontend

under api, we have serializers.py

/////
/////
/////
/////
/////

we are working with private routes
in views.py, we can use the inbuilt permission_classes import of rest_framework for accessing private routes

for a person to access a private route, like in this case to access notes, user must be authenticated
we can use the IsAuthenticated of rest_framework

/////
/////
/////
/////
/////

register new user is now enabled via backend and django templating
since cors is configured, we can click the register link from frontend and utilise django and django templating to create a new user
also, after successful creation submission, we are redirected to frontend
django also takes care of password hashing when form submission happens

/////
/////
/////
/////
/////

url shortening
create a url model, url view logic and render a template

this will work in such a way that a short url corresponding to the long url will be created
and when we try to access it, the shortened url will take it's corresponding long url and redirect to that page